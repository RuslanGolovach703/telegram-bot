from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes, ConversationHandler

from credentials import ChatGPT_TOKEN
from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu, Dialog, default_callback_handler


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'recommend': '–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É –∏–ª–∏ —Ñ–∏–ª—å–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é'
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    })


# –ó–∞–¥–∞–Ω–∏–µ 1
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if dialog.mode == 'gpt' or dialog.mode == 'talk':
        await gpt_dialog(update, context)
    elif dialog.mode == 'quiz':
        await gpt_quiz(update, context)
    else:
        await send_text(update, context, update.message.text)


# –ó–∞–¥–∞–Ω–∏–µ 2
async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = load_prompt('random')
    message = load_message('random')

    await send_image(update, context, 'random')
    message = await send_text(update, context, message)
    answer = await chat_gpt.send_question(prompt, '')
    await message.edit_text(answer)


# –ó–∞–¥–∞–Ω–∏–µ 3
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'gpt'
    prompt = load_prompt('gpt')
    message = load_message('gpt')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'gpt')
    await send_text(update, context, message)


async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    await send_text(update, context, answer)


# –ó–∞–¥–∞–Ω–∏–µ 4
async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'talk'
    message = load_message('talk')
    await send_text_buttons(update, context, message, {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω - –°–æ–ª–∏—Å—Ç –≥—Ä—É–ø–ø—ã Nirvana üé∏',
        'talk_queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II - –ö–æ—Ä–æ–ª–µ–≤–∞ –°–æ–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ üëë',
        'talk_tolkien': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω - –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –ö–æ–ª–µ—Ü" üìñ',
        'talk_nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ - –§–∏–ª–æ—Å–æ—Ñ üß†',
        'talk_hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥ - –§–∏–∑–∏–∫ üî¨'
    })


async def talk_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    person = update.callback_query.data
    await update.callback_query.answer()
    prompt = load_prompt(person)
    chat_gpt.set_prompt(prompt)
    greeting = await chat_gpt.add_message('–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
    await send_image(update, context, person)
    await send_text(update, context, greeting)


# –ó–∞–¥–∞–Ω–∏–µ 5
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'quiz'
    message = load_message('quiz')
    prompt = load_prompt('quiz')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context, message, {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python',
        'quiz_math': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏',
        'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è'
    })


async def quiz_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic = update.callback_query.data
    await update.callback_query.answer()
    question = await chat_gpt.add_message(topic)
    await send_text(update, context, question)


async def gpt_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    await send_text(update, context, answer)
    if answer == '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!':
        dialog.count += 1
    await send_text_buttons(update, context, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {dialog.count}. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å?", {
        'quiz_more': '–î–∞',
        'quiz_end': '–ó–∞–∫–æ–Ω—á–∏—Ç—å',
    })


async def quiz_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    question = await chat_gpt.add_message('quiz_more')
    await send_text(update, context, question)


# –ó–∞–¥–∞–Ω–∏–µ 6
async def recommend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'talk'
    message = load_message('recommend')
    prompt = load_prompt('recommend')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'recommend')
    await send_text_buttons(update, context, message, {
        'rec_movie': '–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º',
        'rec_book': '–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É',
    })


async def rec_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic = update.callback_query.data
    await update.callback_query.answer()
    question = await chat_gpt.add_message(topic)
    await send_text(update, context, question)


dialog = Dialog()
dialog.mode = None
dialog.count = 0
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã dialog

chat_gpt = ChatGptService(ChatGPT_TOKEN)
app = ApplicationBuilder().token(
    "7909709525:AAEM7eZ658URprV2GkhGSOF6SloQZtR3S60").build()

app.add_handler(CommandHandler('start', start))
# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CommandHandler('command', handler_func))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('recommend', recommend))
app.add_handler(MessageHandler(filters.TEXT, echo))


# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))
app.add_handler(CallbackQueryHandler(talk_button, pattern='^talk_.*'))
app.add_handler(CallbackQueryHandler(quiz_button, pattern='^quiz_.*'))
app.add_handler(CallbackQueryHandler(rec_button, pattern='^rec_.*'))
# app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
